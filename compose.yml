volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  mimir-1-data:
  mimir-2-data:
  mimir-3-data:
  minio-data:

networks:
  front-tier:
  back-tier:

services:

  grafana:
    image: grafana/grafana:latest
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--log.level=error"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      # - alertmanager:alertmanager
    #      - pushgateway:pushgateway
    depends_on:
      # - cadvisor
      - mimir-1
      - mimir-2
      - mimir-3
    #      - pushgateway
    networks:
      - back-tier
    restart: always

  #    deploy:
  #      placement:
  #        constraints:
  #          - node.hostname == ${HOSTNAME}

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  # alertmanager:
  #   image: prom/alertmanager:latest
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ./alertmanager/:/etc/alertmanager/
  #   networks:
  #     - back-tier
  #   restart: always
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'
  #    deploy:
  #      placement:
  #        constraints:
  #          - node.hostname == ${HOSTNAME}

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 9092:9092
    command:
      - "-port=9092"
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  #  pushgateway:
  #    image: prom/pushgateway
  #    restart: always
  #    expose:
  #      - 9091
  #    ports:
  #      - "9091:9091"
  #    networks:
  #      - back-tier

  loki:
    image: grafana/loki:latest
    depends_on:
      - promtail
    ports:
      - 3100:3100
    volumes:
      - ./loki/:/etc/loki/
      - ./loki/config.yml:/etc/loki/config.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/config.yml
    networks:
      - back-tier

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
      - ./promtail/:/etc/promtail/
      - ./promtail/config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - back-tier

  mimir-1:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yml"]
    hostname: mimir-1
    depends_on:
      - minio
    volumes:
      - ./mimir/mimir.yml:/etc/mimir.yml
      - ./alertmanager/config.yml:/etc/alertmanager-config.yml
      - mimir-1-data:/data
    restart: always
    networks:
      - back-tier

  mimir-2:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yml"]
    hostname: mimir-2
    depends_on:
      - minio
    volumes:
      - ./mimir/mimir.yml:/etc/mimir.yml
      - ./alertmanager/config.yml:/etc/alertmanager-config.yml
      - mimir-2-data:/data
    restart: always
    networks:
      - back-tier

  mimir-3:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yml"]
    hostname: mimir-3
    depends_on:
      - minio
    volumes:
      - ./mimir/mimir.yml:/etc/mimir.yml
      - ./alertmanager/config.yml:/etc/alertmanager-config.yml
      - mimir-3-data:/data
    restart: always
    networks:
      - back-tier

  mimir-load-balancer:
    image: nginx:latest
    volumes:
      - ./mimir/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - mimir-1
      - mimir-2
      - mimir-3
    ports:
      - 9009:9009
    restart: always
    networks:
      - back-tier
      - front-tier

  minio:
    image: minio/minio
    entrypoint: [""]
    command: ["sh", "-c", "mkdir -p /data/mimir && minio server --quiet /data"]
    environment:
      - MINIO_ROOT_USER=mimir
      - MINIO_ROOT_PASSWORD=supersecret
    volumes:
      - minio-data:/data
    ports:
      - 9000:9000
    networks:
      - back-tier
